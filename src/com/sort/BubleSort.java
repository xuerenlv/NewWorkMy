package com.sort;

import java.util.Arrays;

public class BubleSort {

	public static void main(String[] args) {
		int v[] = { 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67,
				89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8,
				232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7,
				9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345,
				657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576,
				435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16,
				18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76,
				122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243,
				786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21,
				4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43,
				65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523,
				354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25,
				26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45,
				32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231,
				4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30,
				45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1,
				6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4,
				5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56,
				345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113,
				6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13,
				14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65,
				76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775,
				3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19,
				100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433,
				2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123,
				12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44,
				23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77,
				12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325,
				654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27,
				28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111,
				3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234,
				131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45,
				67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8,
				232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7,
				9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345,
				657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576,
				435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16,
				18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76,
				122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243,
				786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21,
				4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43,
				65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523,
				354325, 654, 1231, 4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25,
				26, 27, 28, 29, 30, 45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45,
				32, 111, 3, 5, 2, 1, 6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231,
				4234, 131, 1, 2, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30,
				45, 67, 89, 34, 56, 345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1,
				6, 8, 232, 12113, 6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1, 2, 4,
				5, 7, 9, 12, 13, 14, 16, 18, 19, 100, 21, 4123, 44, 23, 24, 25, 26, 27, 28, 29, 30, 45, 67, 89, 34, 56,
				345, 657, 34, 65, 76, 122, 433, 2, 11, 43, 65, 77, 12, 0, 45, 32, 111, 3, 5, 2, 1, 6, 8, 232, 12113,
				6576, 435, 8775, 3243, 786, 123, 12131, 43523, 354325, 654, 1231, 4234, 131, 1231, 4234, 131, 2134, 243,
				3241, 32, 421, 4, 43214, 3214, 413, 32, 43, 55, 6 };

		// --------------------------naive-------------------------------------------
		long start, end;
		start = System.currentTimeMillis();

		int s[] = naiveBubleSort(v);

		end = System.currentTimeMillis();
		System.out.println("naiveBubleSort  所花时间：" + (end - start));
		// ---------------------------------------------------------------------

		// --------------------------opt-------------------------------------------
		start = System.currentTimeMillis();

		int s1[] = optBubleSort(v);

		end = System.currentTimeMillis();
		System.out.println("naiveBubleSort  所花时间：" + (end - start));
		// ---------------------------------------------------------------------

		System.out.println("************************************************");
		System.out.println(Arrays.toString(s));
		System.out.println(Arrays.toString(s1));
		System.out.println("************************************************");
	}

	// 冒泡排序 无优化
	public static int[] naiveBubleSort(int[] v) {
		int len = v.length;
		int i, j, swap;

		for (i = 0; i < len - 1; i++) {
			for (j = len - 1; j > i; j--) {
				if (v[j - 1] > v[j]) {
					swap = v[j];
					v[j] = v[j - 1];
					v[j - 1] = swap;
				}
			}
		}
		return v;
	}

	// 优化
	public static int[] optBubleSort(int[] v) {
		int len = v.length;
		int i, j, swap;

		boolean swap_ornot = false;
		for (i = 0; i < len - 1; i++) {
			swap_ornot = false;
			for (j = len - 1; j > i; j--) {
				if (v[j] < v[j - 1]) {
					swap = v[j];
					v[j] = v[j - 1];
					v[j - 1] = swap;
					swap_ornot = true;
				}
			}
			if (!swap_ornot)
				return v;
		}
		return v;
	}

}
